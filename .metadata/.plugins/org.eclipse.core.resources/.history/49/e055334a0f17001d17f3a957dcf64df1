package com.springboot.springbootEmployees.service.impl;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.springboot.springbootEmployees.exception.ResourceNotFoundException;
import com.springboot.springbootEmployees.model.Employees;
import com.springboot.springbootEmployees.repository.EmployeeRepository;
import com.springboot.springbootEmployees.service.EmployeeService;

@Service
public  class StudentsServiceImpl implements StudentsService {
	private EmployeeRepository employeeRepository;

	public EmployeeServiceImpl(EmployeeRepository employeeRepository) {
		super();
		this.employeeRepository = employeeRepository;
	}

	@Override
	public Employees SaveEmployee(Employees employee) {
		// TODO Auto-generated method stub
		return employeeRepository.save(employee);
	}

	@Override
	public List<Employees> getAllEmployees() {
		// TODO Auto-generated method stub
		return employeeRepository.findAll();
	}

	@Override
	public Employees getEmployeesById(long id) {
		// TODO Auto-generated method stub
		Optional<Employees> employee=employeeRepository.findById(id);
		if(employee.isPresent()) {
			return employee.get();
		}
		else {
			throw new ResourceNotFoundException("Employee","Id",id);
		}
	}

	@Override
	public Employees updateEmployee(Employees employee, long id) {
		// TODO Auto-generated method stub
		Employees existingEmployee=employeeRepository.findById(id).orElseThrow(()-> new ResourceNotFoundException("Employees","Id",id));
		existingEmployee.setFirstName(employee.getFirstName());
		existingEmployee.setLastName(employee.getLastName());
		existingEmployee.setAge(employee.getAge());
		existingEmployee.setSalary(employee.getSalary());
		existingEmployee.setgender(employee.getgender());
		employeeRepository.save(existingEmployee);
		return existingEmployee;
	}

}
